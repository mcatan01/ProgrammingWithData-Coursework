# -*- coding: utf-8 -*-

def myHealthcare(n):
    '''Generate data simulating a wearable device that collect vital sign data.
    Seed(404) to ensure consistency of results.
    n= size of the data to generate (int)'''
    
    import random
    random.seed(404)
    data = {'ts':[_ for _ in range(n)], 
    'temp':[random.randint(36,39) for _ in range(n)], 
    'hr':[random.randint(55,100) for _ in range(n)], 
    'pulse':[random.randint(55,100) for _ in range(n)], 
    'bloodpr':[random.randint(120,121) for _ in range(n)], 
    'resrate':[random.randint(11,17) for _ in range(n)], 
    'oxsat':[random.randint(93,100) for _ in range(n)], 
    'ph':[round(random.uniform(7.1,7.6), 1) for _ in range(n)]}
    return data

def abnormalSignAnalytics(data, record, size):
    """Get a sample of records from the Vital sign simulator observations 
    and return the abnormal values for pulse or blood pressure.
    data= data to get the sample from (dict) - generated by myHealthcare()
    record= type of the record - either 'pulse' or 'blood pressure' (str)
    size= size of the sample (int)
    """
    import random
    record = record.lower()
    sample = random.sample(data['ts'],size)
    result = list()
    count = 0
    for _ in sample:
        if record == 'pulse':
            if data[record][_] < 60 or data[record][_] > 99:
                count += 1
                anomaly = list()
                anomaly.append(_)
                anomaly.append(data[record][_])
                result.append(anomaly)
        else:
            if data[record][_] == 121:
                count += 1
                anomaly = list()
                anomaly.append(_)
                anomaly.append(data[record][_])
                result.append(anomaly)
                
    return record, count, result
    

def frequencyAnalytics(data,size):
    """Get a sample of records fron from the Vital signs simulator observations
    and return the frequency for pulse rate values.
    data = data to get the sample from (dict)
    size = size of the sample
    """
    
    import random
    sample = random.sample(data['pulse'],size)
    freq = {}
    for _ in {*sample}:
        count = 0
        for element in sample:
            if _ == element:
                count += 1 
        freq[_] = count
    return freq


def healthAnalyzer(data=dict(), element=int):
    '''Realize a sequential search on data generated by myHealthcare() to find 
    a particular value for pulse rate. The function returns a multidimensional
    list with all the records associated with this value.
    data = data used to perform the sarch on (dict)
    element = item to find in the data(int).'''

    count = 0
    ind = list()
    result = list()
    while count < len(data):  
        for _ in data['pulse']:
            if _ == element:
                ind.append(count)
                result.append([(col[count]) for col in list(data.values())])
            count += 1
    return result           
    

def benchmarking(function, n=int):
    '''Benchmark any function similar to myHealthcare(), as requiring n as size of records simulated. 
    Return running time in milliseconds.
    -function= function to run the algorithm on.
    - n= size of the records simulated by myHealthcare (int)'''
    
    import time
    start = int(round(time.time() * 1000))
    test = function(n)
    end = int(round(time.time() * 1000))
    return end-start
        
